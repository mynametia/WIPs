#TouhouDanmakufu[Single]
#ScriptVersion[3]
#Title["HUA CHENG V1"]
#Text["Making some Hua Cheng themed bullets timed to TGCF PV 1's BGM."]
#BGM["./tgcf pv 1 ost.ogg"]
#include "script/default_system/Default_ShotConst.txt"
let objBoss;
let bossSpawned = 0;
let count = 0;
let objScene = GetEnemyBossSceneObjectID();
@Event{
    alternative(GetEventType())
    case(EV_REQUEST_LIFE){
        SetScriptResult(4000);
    }
    case(EV_REQUEST_TIMER){
        SetScriptResult(79);
    }
    case(EV_REQUEST_SPELL_SCORE){
        SetScriptResult(1000000);
    }
}
@Initialize{
    MainTask;
}
@MainLoop{
    if (count == 15*60){
		SpawnBoss;
	}
	if (bossSpawned == 1){
		ObjEnemy_SetIntersectionCircleToShot(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 32); 
		ObjEnemy_SetIntersectionCircleToPlayer(objBoss, ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 24);
	}
	
	count++;
    yield;
}
task MainTask{
	bloodRain;
	while (bossSpawned == 0){
		wait(1);
	}
	if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){return;} //Default kill to prevent (0,0) spawning
	
	wait(60);
	butterflyStorm;
	
}


task bloodRain{
	wait(120);
	
	bloodBullet(GetCenterX()-100,0,40); //should splatter at 160
	wait(120); //comes in at 240
	bloodBullet(GetCenterX()+120,0,30);
	wait(110);
	bloodBullet(GetCenterX(),0,30); //splatter at 380
	wait(170);
	
	openingButterfly(0,0,GetCenterX+100,GetCenterY+110,0); 
	openingButterfly(GetStgFrameWidth(),0,GetCenterX+100,GetCenterY+110,1);
}
task bloodBullet(x,y,delay){
	let n = 40; 
	let blood = CreateShotA2(x, y, 6, 90, -0.05, 2, DS_BALL_M_R_RED, 5);
	wait(delay);
	ascent (i in 0..n/12){
		let ripple_d3 = CreateShotA2(ObjMove_GetX(blood), ObjMove_GetY(blood), 5.5+rand(-4,2), i*360/(n/12), -0.25, 1.2, DS_BALL_L_RED, 0);
	}
	
	ascent (i in 0..n){
		let ripple_l1 = CreateShotA2(ObjMove_GetX(blood), ObjMove_GetY(blood), 5, 4.5+i*360/n, -0.2, 1.2, DS_BALL_S_R_RED, 0);
		ObjMove_SetAngularVelocity(ripple_l1, 0.1);
		let ripple_l2 = CreateShotA2(ObjMove_GetX(blood), ObjMove_GetY(blood), 6, i*360/n, -0.2, 1.5, DS_BALL_S_R_RED, 2);
		
		ObjMove_SetAngularVelocity(ripple_l2, 0.1);
	}
	ascent (i in 0..n/2){
		let ripple_d1 = CreateShotA2(ObjMove_GetX(blood), ObjMove_GetY(blood), 4.5+rand(-3.5,0), rand(10,30)+i*360/(n/2), -0.25, 0.8+rand(0,0.5), DS_BALL_SS_RED, 2);
		ObjMove_SetAngularVelocity(ripple_d1, -0.1);
		let ripple_d2 = CreateShotA2(ObjMove_GetX(blood), ObjMove_GetY(blood), 6.5+rand(-2,1), i*360/(n/2), -0.25, 1.3+rand(0,1), DS_BALL_SS_RED, 5);
		ObjMove_SetAngularVelocity(ripple_d2, -0.1);
	}
	
	Obj_Delete(blood);
}


task openingButterfly(x,y,rx,ry,k){ //rx is 292,ry is 334
	let v = 3.5;
	let d = (pi/2)*power((power(ry,2)+power(rx,2))/2,0.5);
	let t = 140;
	//d/v is 140.789
	let butterfly = CreateShotA2(x, y, 3, k*180, 0, 3,DS_BUTTERFLY_SKY, 0);
	ObjMove_SetAngularVelocity(butterfly, power(-1,k)*(90)/140);
	flittingAround(butterfly,rx,t,k);
	trailingSparkles(butterfly,k);
}
task flittingAround(butterfly,rx,t,k){
	let w = (360*4)/(absolute(rx-GetCenterX)*2*pi);
	ObjMove_AddPatternA2(butterfly, t, 4, 90, 0.05, power(-1,k)*w, 5); //fix this timing
	ObjMove_AddPatternA2(butterfly, t+(270/w), 5, k*180-1, -0.04, power(-1,k)*-1, 2); //fix this timing when butterfly leave circle 
}
task trailingSparkles(obj,k){
	ascent (j in 1..19){
		ascent (i in -5..6){
			let sparkle=CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 4.5, i*15-ObjMove_GetAngle(obj)+20*power(-1,k), -0.1, 1.5-i*i*0.01, DS_RICE_S_WHITE, 0);
			ObjMove_SetAngularVelocity(sparkle, power(-1,k)*-0.1);
		}
		wait(8+log10(j)*1.2);
	}
	wait(60);
	ascent (j in 1..5){
		ascent (i in -5..6){
			let sparkle=CreateShotA2(ObjMove_GetX(obj), ObjMove_GetY(obj), 4.5, i*15-ObjMove_GetAngle(obj)+15*power(-1,k), -0.1, 1.5-i*i*0.01, DS_RICE_S_WHITE, 0);
		}
		wait(12+log10(j)*1.2);
	}
}

task butterflyStorm{
	butterflyStormCont;
	//wait(50);
	createSpirit(0,2,1,180,7);
	createSpirit(1,2,1,180,7);
	
	/*
	loop(2){
		
		wait(120);
		createSpirit(0,2,-1,180);
		createSpirit(1,2,-1,180);
		wait(120);
	}
	*/
}
task createSpirit(ID, num, dir, rad, rounds){
	let objcount = 0; //counter to control firing of bullets and movement
    let angleO = (ID*360/num); //Initial angle (will be updated)
    //obtain object ID
    let obj = CreateShotA1(ObjMove_GetX(objBoss) + rad*cos(angleO), ObjMove_GetY(objBoss) + rad*sin(angleO), 0, angleO + dir*90, DS_BUTTERFLY_SKY, 0); 
    //If using a bullet as a familiar, ensure it doesn't get accidentally deleted
    ObjShot_SetSpellResist(obj, true); 
    ObjShot_SetAutoDelete(obj, false);
    while (ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0 && objcount <= (150*rounds+20)) { //linked to the parent enemy's life
        //ID*360/num sets the angle relative to the other familiars. objcount*dir handles the rotation
		angleO = ID*360/num + objcount*dir; //Update angle
		ObjMove_SetPosition(obj, ObjMove_GetX(objBoss) + rad*cos(angleO), ObjMove_GetY(objBoss) + rad*sin(angleO)); 
		ObjMove_SetAngle(obj, angleO + dir*90);
		
        if (objcount % 6 == 0 ) { //control firing rate
            let currx = ObjMove_GetX(obj);
            let curry = ObjMove_GetY(obj);
			let n = 3;
			if(objcount>=(150*rounds)){
				n -= round((objcount-150)/6);
			}
            ascent(i in 0..n) {
                CreateShotA2(currx, curry, 3.5+i*0.1, angleO - dir*90 + dir*i*45, -0.25, 1+i*0.3, DS_BUTTERFLY_SKY, 0);
            }
        }
        objcount+=3;
        yield;
    }
	ObjMove_SetSpeed(obj, 2);
    //ObjShot_FadeDelete(obj);
}


task butterflyStormCont{
	if(ObjEnemy_GetInfo(objBoss, INFO_LIFE) <= 0){return;} //Default kill to prevent (0,0) spawning
	let angleT = 90;
	let nu = 0;
	let currcount = count;
	while(count<=currcount+220){
		ascent(j in 0..3){
			ascent(i in 0..3){
				let obj=CreateShotA1(ObjMove_GetX(objBoss), ObjMove_GetY(objBoss), 2, angleT+(15*i)+120*j, DS_BUTTERFLY_SKY, 5);
				ObjMove_SetAngularVelocity(obj, ((-1)^(i%2))*1.6);
				circlingAround(obj,i);
			}
			wait(1);
		}
		angleT += 360/18;	
	}
}
task circlingAround(obj,i){
	//ObjMove_AddPatternA2(obj, 120, 4, 90, 0.05, power(-1,k)*w, 5);
	wait(10);
	ObjMove_SetAcceleration(obj, 0.1);
	ObjMove_SetMaxSpeed(obj, 3); 
	//ObjMove_SetAngularVelocity(obj, ((-1)^(i%2))*1.6);
	//wait(220);
    //ObjMove_SetAngularVelocity(obj, 0);
}


task BulletAim (obj){
	wait(60);
	ObjMove_SetAngle(obj, GetAngleToPlayer(obj));
}
task movement{
	while(ObjEnemy_GetInfo(objBoss, INFO_LIFE)>0){
		ObjMove_SetDestAtFrame(objBoss, rand(GetCenterX() + 90, GetCenterX() - 90), rand(GetCenterY() - 60, GetCenterY() - 120), 60);
		wait(240);
	}
}


task TDrawLoop{
	let imgExRumia = GetCurrentScriptDirectory() ~ "ExRumia.png";
    ObjPrim_SetTexture(objBoss, imgExRumia);
    ObjSprite2D_SetSourceRect(objBoss, 64, 1, 127, 64);
    ObjSprite2D_SetDestCenter(objBoss);
}
task TFinalize {
    while(ObjEnemy_GetInfo(objBoss, INFO_LIFE) > 0){yield;}
    Obj_Delete(objBoss);
    DeleteShotAll(TYPE_ALL, TYPE_IMMEDIATE);
    SetAutoDeleteObject(true);
    CloseScript(GetOwnScriptID());
    return;
}

task SpawnBoss{
	objBoss = ObjEnemy_Create(OBJ_ENEMY_BOSS);
    ObjEnemy_Regist(objBoss);
	ObjMove_SetPosition(objBoss, GetCenterX(), 0);
	bossSpawned = 1;
	ObjMove_SetDestAtFrame(objBoss, GetCenterX(), 80, 60);
	TDrawLoop;
	ObjEnemyBossScene_StartSpell(objScene);
	TFinalize;
}
function rand_int(min, max){
  return round(rand(min, max))
}
function GetCenterX(){
    return GetStgFrameWidth() / 2;
}
function GetCenterY(){
    return GetStgFrameHeight() / 2;
}
function wait(n){
     loop(n){yield;}
}